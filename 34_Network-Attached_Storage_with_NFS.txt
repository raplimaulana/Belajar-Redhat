### NETWORK FILE SYSTEM (NFS) ###
NFS is an internet standard protocol used by Linux, UNIX, and similar operating systems as their native network file system.
NFS servers export shares (directories). NFS clients mount an exported share to a local mount point (directory), which must exist. NFS shares can be mounted a number of ways:
•	Manually, using the mount command.
•	Automatically at boot time using /etc/fstab entries.
•	On demand, using either the autofs service or the systemd.automount facility.


##mounting NFS shares
To mount an NFS share, follow these three steps:
1.	Identif The administrator of the NFS client system. 
    the client administrator can identify NFSv4 shares by mounting the root directory of the NFS server and exploring the exported directories. 
    Do this as the root user. Access to shares that use Kerberos security will be denied, but the share (directory) name will be visible. Other shared directories will be browsable.

    sudo mkdir folder1
    sudo mount serverb:/ folder1

    *mount my-server:/ /mnt/

2.	Mount point.
    Use mkdir to create a mount point in a suitable location.

    mkdir -p folder1

3.	Mount
    As with file systems on partitions, NFS shares must be mounted to be available. 
    To mount an NFS share, select from the following.
    •	Mount temporarily
        sudo mount -t nfs -o rw, sync serverb:/share folder1

        *t nfs   = file-system type for NFS shares (not strictly required but shown for completeness). 
         -o sync = tells mount to immediately synchronize write operations with the NFS server (the default is asynchronous).
    
    •	Mount persistently
        vim /etc/fstab

        serverb:/share /folder1 nfs rw,soft 0 0

        sudo mount /folder1

        *Because the NFS server and mount options are found in the /etc/fstab file by the NFS client service, you do not need to specify these on the command line.

##unmonting NFS
sudo umount folder1

*Unmounting a share does not remove its /etc/fstab entry. Unless you remove or comment out the entry, the NFS share will be remounted either at the next system boot or when the NFS client service is restarted.







## NFSCONF TOOL ###
nfsconf tool manage the NFS client and server configuration files under NFSv4 and NFSv3. 
Use the nfsconf tool to get, set, or unset NFS configuration parameters.
All configuration save in /etc/nfs.conf or in /etc/sysconfig/nfs for erlier version.

##set a value for the key in the specified section
sudo nfsconf --set nfsd vers4.2 y

setara dengan 

vim /etc/nfs.conf
  
[nfsd]
vers4.2=y

##get the value for the key in the specified section
sudo nfsconf --get nfsd vers4.2

##unset the value for the key in the specified section
sudo nfsconf --unset nfsd vers4.2

##configure an NFSv4-only client
#disabling UDP and other NFSv2 and NFSv3 related keys
sudo nfsconf --set nfsd udp n
sudo nfsconf --set nfsd ver2 n
sudo nfsconf --set nfsd ver3 n

#enable TCP, and NFSv4, related keys
sudo nfsconf --set nfsd tcp y
sudo nfsconf --set nfsd vers4 y
sudo nfsconf --set nfsd vers4.0 y
sudo nfsconf --set nfsd vers4.1 y
sudo nfsconf --set nfsd vers4.2 y
    
#check the /etc/nfs.conf configuration file
[nfsd]
udp=n 
vers2=n
vers3=n
tcp=y
vers4=y
vers4.0=y
vers4.1=y 
vers4.2=y 






### AUTOMOUNTING NFS SHARES ###
##mounting NFS shares with automounter
The automounter is a service (autofs) that automatically mounts NFS shares "on-demand, "and will automatically unmount NFS shares when they are no longer being used.
Automounter Benefits:
•	Users do not need to have root privileges to run the mount and umount commands.
•	NFS shares configured in the automounter are available to all users on the machine, subject to access permissions.
•	NFS shares are not permanently connected like entries in /etc/fstab, freeing network and system resources.
•	The automounter is configured on the client side; no server-side configuration is required.
•	The automounter uses the same options as the mount command, including security options.
•	The automounter supports both direct and indirect mount-point mapping, for flexibility in mount-point locations.
•	autofs creates and removes indirect mount points, eliminating manual management.
•	NFS is the default automounter network file system, but other network file systems can be automatically mounted.
•	autofs is a service that is managed like other system services.

##create an aotomount
1.	Install the autofs package.
    sudo yum install autofs

2.	Add a master map file to /etc/auto.master.d. 
    This file identifies the base directory used for mount points and identifies the mapping file used for creating the automounts.

    sudo vim /etc/auto.master.d/demo.autofs

    *The name of the master map file is arbitrary (although typically meaningful), but it must have an extension of .autofs for the subsystem to recognize it. 
    *You can place multiple entries in a single master map file.
     Alternatively, you can create multiple master map files each with its own entries grouped logically.

    /shares /etc/auto.demo

    */shares       = directory as the base for indirect automounts.
     etc/auto.demo = file contains the mount details.
    
3.	Create the mapping files. 
    Each mapping file identifies the mount point, mount options, and source location to mount for a set of automounts. 
    The mapping file-naming convention is **/etc/auto.name**, where name reflects the content of the map
    The format of an entry is mount point, mount options, and source location. 
    This example shows a basic indirect mapping entry. Direct maps and indirect maps using wildcards are covered later in this section.
    •	Known as the key in the man pages, the mount point is created and removed automatically by the autofs service. 
        In this case, the fully qualified mount point is /shares/work (see the master map file). The /shares directory and the /shares/work directories are created and removed as needed by the autofs service.
        In this example, the local mount point mirrors the server's directory structure, however this is not required; the local mount point can be named anything. 
        The autofs service does not enforce a specific naming structure on the client.

    •	Mount options start with a dash character (-) and are comma-separated with no white space. 
        Mount options available to a manual mounting of a file system are available when automounting. 
        In this example, the automounter mounts the share with read/write access (rw option), and the server is synchronized immediately during write operations (sync option).
        Useful automounter-specific options include -fstype= and -strict.
        Use fstype to specify the file system type, for example, nfs4 or xfs, and use strict to treat errors when mounting file systems as fatal.

    •	The source location for NFS shares follows the host:/pathname pattern. in this example, serverb:/shares/work. 
        For this automount to succeed, the NFS server, serverb, must export the directory with read/write access and the user requesting access must have standard Linux file permissions on the directory. 
        If serverb exports the directory with read/only access, then the client will get read/only access even though it requested read/ write access.

4.	Start and enable the automounter service.
    sudo systemctl enable --now autofs

#direct maps
Direct maps are used to map an NFS share to an existing absolute path mount point. 
To use directly mapped mount points, the master map file might appear as follows:
/- /etc/auto.direct

*All direct map entries use /- as the base directory. 

In this case, the mapping file that contains the mount details is /etc/auto.direct. 
The content for the /etc/auto.direct file might appear as follows:
/mnt/docs -rw,syn serverb:/shares/docs 

*The mount point (or key) is always an absolute path. The rest of the mapping file uses the same structure.
 In this example the /mnt directory exists, and it is not managed by autofs. 
 The full directory /mnt/docs will be created and removed automatically by the autofs service.

#indirect wildcard maps
When an NFS server exports multiple subdirectories within a directory, then the automounter can be configured to access any one of those subdirectories using a single mapping entry.
Continuing the previous example, if serverb:/shares exports two or more subdirectories and they are accessible using the same mount options, then the content for the /etc/auto.demo file might appear as follows:
* -rw,syn serverb:/shares/&

*The mount point (or key) is an asterisk character (*), and the subdirectory on the source location is an ampersand character (&). Everything else in the entry is the same.
*As with the indirect example, the work directory is created and removed automatically by autofs.


